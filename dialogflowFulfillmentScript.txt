// See https://github.com/dialogflow/dialogflow-fulfillment-nodejs
// for Dialogflow fulfillment library docs, samples, and to report issues
'use strict';
 
const functions = require('firebase-functions');
const {WebhookClient} = require('dialogflow-fulfillment');
const {Card, Suggestion} = require('dialogflow-fulfillment');

const admin = require("firebase-admin");
admin.initializeApp({
    credential: admin.credential.applicationDefault(),
    databaseURL: 'ws://okarduino-18488.firebaseio.com/',
})
  
process.env.DEBUG = 'dialogflow:debug'; // enables lib debugging statements
exports.dialogflowFirebaseFulfillment = functions.https.onRequest((request, response) => {
  const agent = new WebhookClient({ request, response });
  console.log('Dialogflow Request headers: ' + JSON.stringify(request.headers));
  console.log('Dialogflow Request body: ' + JSON.stringify(request.body));
 
  function welcome(agent) {
      return admin.database().ref('pw').once('value').then((snapshot)=>{
          var pw = snapshot.val();
          if(pw) {
              agent.add(`디바이스에게 전송하고자 하는 명령어를 음성 또는 화면의 키보드로 입력하세요.`);   
          } else {
              agent.add(`디바이스의 전원이 꺼져있습니다. 명령이 전달되지 않습니다.`);   
          }
      });
  }
 
  function fallback(agent) {
    agent.add(`밝기, 색상, 전원, 온도 외의 명령은 지원하지 않습니다.`);
  }
  
  function setBrightness(agent) {
      agent.add('밝기를 몇 퍼센트로 설정할까요?');
  }
  
  function setBrightnessPercent(agent) {
      const br = agent.parameters.number;
      if (br<0 || br>100) {
        agent.add("잘못된 입력입니다.");
        return;
      }
      agent.add("밝기를 "+br+"%로 설정합니다.");
      return admin.database().ref('br').transaction((DBbr)=>{
          DBbr = br;
          return DBbr;
      });
  }
  
  function setColor(agent) {
      agent.add('색상을 어떻게 설정할까요?');
  }
  
  function setColorExample(agent) {
      agent.add("빨강, 주황, 노랑, 초록, 파랑, 남색, 보라 중 하나를 고르시면 됩니다.");
  }
  
  function setColorPick(agent) {
      var color = agent.parameters.color;
      if (!(color == "빨강"||color == "주황"||color == "노랑"||color == "초록"||color == "파랑"||color == "남색"||color == "보라")) {
          agent.add("빨강, 주황, 노랑, 초록, 파랑, 남색, 보라 중 하나를 고르시면 됩니다.");
          return;
      }
      agent.add("색상을 "+color+"(으)로 설정하였습니다.");
      if (color == "빨강") {
          return admin.database().ref('color').transaction((DBcolor)=>{
              DBcolor = 1;
              return DBcolor;
          });
      }
      else if (color == "주황") {
          return admin.database().ref('color').transaction((DBcolor)=>{
              DBcolor = 2;
              return DBcolor;
          });
      }
      else if (color == "노랑") {
          return admin.database().ref('color').transaction((DBcolor)=>{
              DBcolor = 3;
              return DBcolor;
          });
      }
      else if (color == "초록") {
          return admin.database().ref('color').transaction((DBcolor)=>{
              DBcolor = 4;
              return DBcolor;
          });
      }
      else if (color == "파랑") {
          return admin.database().ref('color').transaction((DBcolor)=>{
              DBcolor = 5;
              return DBcolor;
          });
      }
      else if (color == "남색") {
          return admin.database().ref('color').transaction((DBcolor)=>{
              DBcolor = 6;
              return DBcolor;
          });
      }
      else if (color == "보라") {
          return admin.database().ref('color').transaction((DBcolor)=>{
              DBcolor = 7;
              return DBcolor;
          });
      }
  }
  
  function setPower(agent) {
      agent.add("램프의 전원을 어떻게 할까요?");
  }
  
  function setPowerOn(agent) {
      agent.add("램프의 전원을 켰습니다.");
      return admin.database().ref('pw').transaction((DBpw)=>{
          DBpw = true;
          return DBpw;
      });
  }
  
  function setPowerOff(agent) {
      agent.add("램프의 전원을 껐습니다.");
      return admin.database().ref('pw').transaction((DBpw)=>{
          DBpw = false;
          return DBpw;
      });
  }
  
  function checkTemperature(agent) {
      return admin.database().ref('tm').once("value").then((snapshot)=>{
          var tm = snapshot.val();
          agent.add("디바이스가 "+tm+"도의 열을 감지했습니다.");
      })
  }
  
  function setEnd(agent) {
      agent.add("오케이펫 서비스를 종료합니다.");
      //must set end conversation at intents section.
  }
  
  // // Uncomment and edit to make your own intent handler
  // // uncomment `intentMap.set('your intent name here', yourFunctionHandler);`
  // // below to get this function to be run when a Dialogflow intent is matched
  // function yourFunctionHandler(agent) {
  //   agent.add(`This message is from Dialogflow's Cloud Functions for Firebase editor!`);
  //   agent.add(new Card({
  //       title: `Title: this is a card title`,
  //       imageUrl: 'https://developers.google.com/actions/images/badges/XPM_BADGING_GoogleAssistant_VER.png',
  //       text: `This is the body text of a card.  You can even use line\n  breaks and emoji! `,
  //       buttonText: 'This is a button',
  //       buttonUrl: 'https://assistant.google.com/'
  //     })
  //   );
  //   agent.add(new Suggestion(`Quick Reply`));
  //   agent.add(new Suggestion(`Suggestion`));
  //   agent.setContext({ name: 'weather', lifespan: 2, parameters: { city: 'Rome' }});
  // }

  // // Uncomment and edit to make your own Google Assistant intent handler
  // // uncomment `intentMap.set('your intent name here', googleAssistantHandler);`
  // // below to get this function to be run when a Dialogflow intent is matched
  // function googleAssistantHandler(agent) {
  //   let conv = agent.conv(); // Get Actions on Google library conv instance
  //   conv.ask('Hello from the Actions on Google client library!') // Use Actions on Google library
  //   agent.add(conv); // Add Actions on Google library responses to your agent's response
  // }
  // // See https://github.com/dialogflow/dialogflow-fulfillment-nodejs/tree/master/samples/actions-on-google
  // // for a complete Dialogflow fulfillment library Actions on Google client library v2 integration sample

  // Run the proper function handler based on the matched Dialogflow intent name
  
  let intentMap = new Map();
  intentMap.set('Default Welcome Intent', welcome);
  intentMap.set('Default Fallback Intent', fallback);
  intentMap.set('SetBrightness', setBrightness);
  intentMap.set('SetBrightnessPercent', setBrightnessPercent);
  intentMap.set('SetColor', setColor);
  intentMap.set('SetColorExample', setColorExample);
  intentMap.set('SetColorPick', setColorPick);
  intentMap.set('SetPower', setPower);
  intentMap.set('SetPowerOn', setPowerOn);
  intentMap.set('SetPowerOff', setPowerOff);
  intentMap.set('SetEnd', setEnd);
  intentMap.set('CheckTemperature', checkTemperature);
  // intentMap.set('your intent name here', yourFunctionHandler);
  // intentMap.set('your intent name here', googleAssistantHandler);
  agent.handleRequest(intentMap);
});
